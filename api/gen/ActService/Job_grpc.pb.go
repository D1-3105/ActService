// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.6.1
// source: ActService/Job.proto

package actservice

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ActService_ScheduleActJob_FullMethodName = "/actservice.ActService/ScheduleActJob"
	ActService_JobLogStream_FullMethodName   = "/actservice.ActService/JobLogStream"
)

// ActServiceClient is the client API for ActService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ActServiceClient interface {
	ScheduleActJob(ctx context.Context, in *Job, opts ...grpc.CallOption) (*JobResponse, error)
	JobLogStream(ctx context.Context, in *JobLogRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[JobLogMessage], error)
}

type actServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewActServiceClient(cc grpc.ClientConnInterface) ActServiceClient {
	return &actServiceClient{cc}
}

func (c *actServiceClient) ScheduleActJob(ctx context.Context, in *Job, opts ...grpc.CallOption) (*JobResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JobResponse)
	err := c.cc.Invoke(ctx, ActService_ScheduleActJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actServiceClient) JobLogStream(ctx context.Context, in *JobLogRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[JobLogMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ActService_ServiceDesc.Streams[0], ActService_JobLogStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[JobLogRequest, JobLogMessage]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ActService_JobLogStreamClient = grpc.ServerStreamingClient[JobLogMessage]

// ActServiceServer is the server API for ActService service.
// All implementations must embed UnimplementedActServiceServer
// for forward compatibility.
type ActServiceServer interface {
	ScheduleActJob(context.Context, *Job) (*JobResponse, error)
	JobLogStream(*JobLogRequest, grpc.ServerStreamingServer[JobLogMessage]) error
	mustEmbedUnimplementedActServiceServer()
}

// UnimplementedActServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedActServiceServer struct{}

func (UnimplementedActServiceServer) ScheduleActJob(context.Context, *Job) (*JobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScheduleActJob not implemented")
}
func (UnimplementedActServiceServer) JobLogStream(*JobLogRequest, grpc.ServerStreamingServer[JobLogMessage]) error {
	return status.Errorf(codes.Unimplemented, "method JobLogStream not implemented")
}
func (UnimplementedActServiceServer) mustEmbedUnimplementedActServiceServer() {}
func (UnimplementedActServiceServer) testEmbeddedByValue()                    {}

// UnsafeActServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ActServiceServer will
// result in compilation errors.
type UnsafeActServiceServer interface {
	mustEmbedUnimplementedActServiceServer()
}

func RegisterActServiceServer(s grpc.ServiceRegistrar, srv ActServiceServer) {
	// If the following call pancis, it indicates UnimplementedActServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ActService_ServiceDesc, srv)
}

func _ActService_ScheduleActJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Job)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActServiceServer).ScheduleActJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActService_ScheduleActJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActServiceServer).ScheduleActJob(ctx, req.(*Job))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActService_JobLogStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(JobLogRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ActServiceServer).JobLogStream(m, &grpc.GenericServerStream[JobLogRequest, JobLogMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ActService_JobLogStreamServer = grpc.ServerStreamingServer[JobLogMessage]

// ActService_ServiceDesc is the grpc.ServiceDesc for ActService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ActService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "actservice.ActService",
	HandlerType: (*ActServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ScheduleActJob",
			Handler:    _ActService_ScheduleActJob_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "JobLogStream",
			Handler:       _ActService_JobLogStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "ActService/Job.proto",
}
